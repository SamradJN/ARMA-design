clc; clear; close all;
tic
%% Problem Definition
global NFE;
model=CreateModelARIMA();
CostFunction=@(z) ARIMAFunc(z,model); % Cost Function
%
nVar=5;                           % Number of Decision Variables
VarSize=[1 nVar];                % Size of Decision Variables Matrix
VarMin=[0.001 0.1 1.00 0.00 0.00];     % Lower Bound of Variables
VarMax=[1.000 8.0 4.00 0.95 0.95];     % Upper Bound of Variables
%% PSO Parameters
% design=[3 2 1 1];
design=[3 2 1 2];
% design=[3 2 3 3];
% design=[1	1	1	1
% 1	2	2	2
% 1	3	3	3
% 2	1	2	3
% 2	2	3	1
% 2	3	1	2
% 3	1	3	2
% 3	2	1	3
% 3	3	2	1];
%
des=design(1,:);
%
IW=[0.8,1,1.2];
LF1=[1.5,2,2.5];
LF2=[2.5,2,1.5];
PS=[20,50,80];
IN=[50,100,150];
%
w=IW(des(1));         % Inertia Weight
c1=LF1(des(2));       % Personal Learning Coefficient
c2=LF2(des(2));       % Global Learning Coefficient
nPop=PS(des(3));      % Population Size (Swarm Size)
MaxIt=IN(des(4));     % Maximum Number of Iterations
%
% % w=1; 
% %Inertia Weight
% % wdamp=0.5;     % Inertia Weight Damping Ratio
% % c1=2;           % Personal Learning Coefficient
% % c2=2;           % Global Learning Coefficient
% %
% % Constriction Coefficients
% phi1=2.05;
% phi2=2.05;
% phi=phi1+phi2;
% chi=2/(phi-2+sqrt(phi^2-4*phi));
% w=chi;          % Inertia Weight
wdamp=0.99;        % Inertia Weight Damping Ratio
% c1=chi*phi1;    % Personal Learning Coefficient
% c2=chi*phi2;    % Global Learning Coefficient
%
% Velocity Limits
VelMax=0.1*(VarMax-VarMin);
VelMin=-VelMax;
%% Initialization
empty_particle.Position=[];
empty_particle.PositionInt=[];
empty_particle.Cost=[];
empty_particle.Velocity=[];
empty_particle.sol=[];
empty_particle.Best.Position=[];
empty_particle.Best.PositionInt=[];
empty_particle.Best.Cost=[];
empty_particle.Best.sol=[];
%
particle=repmat(empty_particle,nPop,1);
%
GlobalBest.Cost=inf;
for i=1:nPop
    % Initialize Position
    particle(i).Position=round(unifrnd(VarMin,VarMax,VarSize),2);
%     particle(i).Position=unifrnd(VarMin,VarMax,VarSize);
%    
    particle(i).PositionInt(1)=min(floor(20*particle(i).Position(1)+1),20);
    particle(i).PositionInt(2)=round(particle(i).Position(2),2);
    particle(i).PositionInt(3)=round(particle(i).Position(3),2);
    particle(i).PositionInt(4)=round(particle(i).Position(4),2);
    particle(i).PositionInt(5)=round(particle(i).Position(5),2);
    % Initialize Velocity
    particle(i).Velocity=zeros(VarSize);
%    
    % Evaluation
    [particle(i).Cost, particle(i).sol]=CostFunction(particle(i).PositionInt);
%    
    % Update Personal Best
    particle(i).Best.Position=particle(i).Position;
    particle(i).Best.PositionInt=particle(i).PositionInt;
    particle(i).Best.Cost=particle(i).Cost;
    particle(i).Best.sol=particle(i).sol;
%    
    % Update Global Best
    if particle(i).Best.Cost<GlobalBest.Cost     
        GlobalBest=particle(i).Best;   
    end
end
%
BestCost=zeros(MaxIt,1);
%
nfe=zeros(MaxIt,1);
%% PSO Main Loop
ETTC=zeros(1,MaxIt);
for it=1:MaxIt
%    
    for i=1:nPop     
        % Update Velocity
        particle(i).Velocity = w*particle(i).Velocity ...
            +c1*rand(VarSize).*(particle(i).Best.Position-particle(i).Position) ...
            +c2*rand(VarSize).*(GlobalBest.Position-particle(i).Position);
%        
        % Apply Velocity Limits
        particle(i).Velocity = max(particle(i).Velocity,VelMin);
        particle(i).Velocity = min(particle(i).Velocity,VelMax);
%        
        % Update Position
        particle(i).Position = particle(i).Position + particle(i).Velocity;
%        
        % Velocity Mirror Effect
        IsOutside=(particle(i).Position<VarMin | particle(i).Position>VarMax);
        particle(i).Velocity(IsOutside)=-particle(i).Velocity(IsOutside);
%        
        % Apply Position Limits
        particle(i).Position = max(particle(i).Position,VarMin);
        particle(i).Position = min(particle(i).Position,VarMax);
%        
    particle(i).PositionInt(1)=min(floor(20*particle(i).Position(1)+1),20);
    particle(i).PositionInt(2)=round(particle(i).Position(2),2);
    particle(i).PositionInt(3)=round(particle(i).Position(3),2);
    particle(i).PositionInt(4)=round(particle(i).Position(4),2);
    particle(i).PositionInt(5)=round(particle(i).Position(5),2);    
        % Evaluation
        [particle(i).Cost, particle(i).sol]=CostFunction(particle(i).PositionInt);
%        
        % Update Personal Best
        if particle(i).Cost<particle(i).Best.Cost
%            
            particle(i).Best.Position=particle(i).Position;
            particle(i).Best.PositionInt=particle(i).PositionInt;
            particle(i).Best.Cost=particle(i).Cost;
            particle(i).best.sol= particle(i).sol;
%                     
            % Update Global Best
            if particle(i).Best.Cost<GlobalBest.Cost                
                GlobalBest=particle(i).Best;
                GlobalSol=particle(i).sol;
            end
%            
        end       
    end
%    
    BestCost(it)=GlobalBest.Cost;
%    
    ETTC(it)=GlobalBest.Cost;
    nfe(it)=NFE;
    disp(['iter=  ' num2str(it) ': NFE = ' num2str(nfe(it)) ',EHC=  ' num2str(GlobalBest.Cost)])
    disp(GlobalBest.PositionInt)
%    
    w=w*wdamp;    
end
   disp(GlobalSol)
% semilogy(BestCost)
toc
% Elapsedtime=;
%
% Exit1(1,1:3)=GlobalSol.z; 
% Exit2(1,1)=GlobalSol.EHC0; Exit2(1,2)=GlobalSol.ARL0; Exit2(1,3)=GlobalSol.ARL1; Exit2(1,4)=GlobalSol.ATS1;